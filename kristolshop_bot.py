import discord
from discord.ext import commands
import asyncio
import random
import aiosqlite
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv("C:/Users/admin/KristolShopBot/.env")

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

DB_PATH = "C:/Users/admin/KristolShopBot/economy.db"

async def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id TEXT PRIMARY KEY,
            wallet INTEGER DEFAULT 0,
            bank INTEGER DEFAULT 0
        )
        """)
        await db.commit()

async def get_user(user_id):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT wallet, bank FROM users WHERE user_id = ?", (str(user_id),)) as cursor:
            row = await cursor.fetchone()
            if row:
                return row[0], row[1]
            else:
                await db.execute("INSERT INTO users (user_id) VALUES (?)", (str(user_id),))
                await db.commit()
                return 0, 0

async def update_balance(user_id, wallet_delta=0, bank_delta=0):
    async with aiosqlite.connect(DB_PATH) as db:
        wallet, bank = await get_user(user_id)
        wallet += wallet_delta
        bank += bank_delta
        await db.execute("REPLACE INTO users (user_id, wallet, bank) VALUES (?, ?, ?)", (str(user_id), wallet, bank))
        await db.commit()

@bot.command(name="balance", aliases=["–±–∞–ª–∞–Ω—Å"])
async def balance(ctx):
    wallet, bank = await get_user(ctx.author.id)
    embed = discord.Embed(title="üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å", color=discord.Color.blue())
    embed.add_field(name="–ö–æ—à–µ–ª—ë–∫", value=f"{wallet} –º–æ–Ω–µ—Ç", inline=True)
    embed.add_field(name="–ë–∞–Ω–∫", value=f"{bank} –º–æ–Ω–µ—Ç", inline=True)
    await ctx.send(embed=embed)

@bot.command(name="work", aliases=["—Ä–∞–±–æ—Ç–∞"])
async def work(ctx):
    earnings = random.randint(50, 150)
    await update_balance(ctx.author.id, wallet_delta=earnings)
    await ctx.send(f"üíº {ctx.author.mention}, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {earnings} –º–æ–Ω–µ—Ç!")

@bot.command(name="rob", aliases=["–≥—Ä–∞–±–∏—Ç—å"])
async def rob(ctx, target: discord.Member):
    if target.id == ctx.author.id:
        return await ctx.send("üòí –°–µ–±—è –≥—Ä–∞–±–∏—Ç—å –Ω–µ–ª—å–∑—è.")

    success = random.choice([True, False])
    amount = random.randint(30, 100)

    attacker_wallet, _ = await get_user(ctx.author.id)
    victim_wallet, _ = await get_user(target.id)

    if success and victim_wallet >= amount:
        await update_balance(ctx.author.id, wallet_delta=amount)
        await update_balance(target.id, wallet_delta=-amount)
        embed = discord.Embed(title="üö® –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ!", color=discord.Color.red())
        embed.add_field(name="–ì—Ä–∞–±–∏—Ç–µ–ª—å", value=ctx.author.mention)
        embed.add_field(name="–ñ–µ—Ä—Ç–≤–∞", value=target.mention)
        embed.add_field(name="–£–∫—Ä–∞–¥–µ–Ω–æ", value=f"{amount} –º–æ–Ω–µ—Ç")
        await ctx.send(embed=embed)
    else:
        await ctx.send(f"üöî {ctx.author.mention}, –≤–∞—Å –ø–æ–π–º–∞–ª–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è!")

@bot.command(name="transfer", aliases=["–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"])
async def transfer(ctx, target: discord.Member, amount: int):
    if amount <= 0:
        return await ctx.send("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
    sender_wallet, _ = await get_user(ctx.author.id)
    if sender_wallet < amount:
        return await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")

    await update_balance(ctx.author.id, wallet_delta=-amount)
    await update_balance(target.id, wallet_delta=amount)
    await ctx.send(f"üí∏ {ctx.author.mention} –ø–µ—Ä–µ–≤—ë–ª {amount} –º–æ–Ω–µ—Ç {target.mention}.")

@bot.command(name="bank")
async def bank(ctx, action: str, amount: int):
    wallet, bank = await get_user(ctx.author.id)
    if action == "deposit":
        if amount > wallet:
            return await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –≤ –∫–æ—à–µ–ª—å–∫–µ.")
        await update_balance(ctx.author.id, wallet_delta=-amount, bank_delta=amount)
        await ctx.send(f"üè¶ –í—ã –ø–æ–ª–æ–∂–∏–ª–∏ {amount} –º–æ–Ω–µ—Ç –≤ –±–∞–Ω–∫.")
    elif action == "withdraw":
        if amount > bank:
            return await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –≤ –±–∞–Ω–∫–µ.")
        await update_balance(ctx.author.id, wallet_delta=amount, bank_delta=-amount)
        await ctx.send(f"üí∞ –í—ã —Å–Ω—è–ª–∏ {amount} –º–æ–Ω–µ—Ç –∏–∑ –±–∞–Ω–∫–∞.")
    else:
        await ctx.send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !bank deposit <—Å—É–º–º–∞> –∏–ª–∏ !bank withdraw <—Å—É–º–º–∞>")

@bot.event
async def on_ready():
    print("‚úÖ Kristol Shop Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

async def main():
    try:
        await init_db()
        token = os.getenv("DISCORD_TOKEN")
        if not token:
            raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        await bot.start(token)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", e)
        input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ ...")

if __name__ == "__main__":
    asyncio.run(main())



